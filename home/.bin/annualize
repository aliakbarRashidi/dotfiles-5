#!/usr/bin/env ruby

require 'money'
require 'money/bank/google_currency'
require 'json'
require 'date'

Money.default_bank = Money::Bank::GoogleCurrency.new
I18n.enforce_available_locales = false

HELP = <<DOC
annualize [-h|--help] <json_file>
DOC

CURRENCY_MAP = {
  "BR" => "BRL",
  "CA" => "CAD",
  "CN" => "CNY",
  "DE" => "EUR",
  "ES" => "EUR",
  "FR" => "EUR",
  "GB" => "GBP",
  "IN" => "INR",
  "IT" => "EUR",
  "JP" => "JPY",
  "MX" => "MXN",
  "UK" => "GBP",
  "US" => "USD"
}

def annualize(samples, diff, days)
  samples * diff / days * 365
end

def days_running(obj)
  start_date = obj["start_date"]
  end_date = obj["end_date"]

  return unless start_date && end_date

  start_date = Date.parse(start_date)
  end_date = Date.parse(end_date)
  (end_date - start_date).to_i
end

# returns a hash
#   "ops" => annualized ops
#   "units" => annualized units
#   "currency" => currency ISO symbol
def parse_locale(name, obj)
  currency = CURRENCY_MAP[name]
  unless currency
    puts "#{name} is not a valid locale"
    exit 1
  end

  days = days_running(obj)

  samples = obj["samples"]
  units_diff = obj["units_diff"]
  ops_diff = obj["ops_diff"]
  unless samples && units_diff && ops_diff
    puts "missing either samples, units diff or ops diff"
    exit 1
  end

  raw_ops = annualize(samples, ops_diff, days)
  money = Money.new(raw_ops, currency)
  money = money * money.currency.subunit_to_unit
  ops = money.exchange_to(:USD)
  units = annualize(samples, units_diff, days)
  return {
    "raw_ops" => raw_ops.to_i,
    "ops" => ops.to_i,
    "units" => units.to_i,
    "currency" => currency,
    "days" => days
  }
end

def parse_weblab(data)
  total_ops = 0
  total_units = 0

  data["locales"].each do |name, obj|
    res = parse_locale(name, obj)
    puts "  #{name}:"
    puts "    ops: #{res["ops"]} USD (#{res["raw_ops"]} #{res["currency"]})"
    puts "    units: #{res["units"]}"

    total_ops += res["ops"]
    total_units += res["units"]
  end

  puts
  puts "  TOTAL OPS: #{total_ops} USD"
  puts "  TOTAL UNITS: #{total_units}"
end

if ["-h", "--help"].include?(ARGV[0]) || ARGV.size < 1
  puts HELP
  exit 1
end

weblabs = JSON.parse(File.read(ARGV[0]))


weblabs.each do |weblab, data|
  puts "weblab: #{weblab}"
  parse_weblab(data)
end
